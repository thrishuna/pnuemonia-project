# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iY1j_9aEBnc5ibSDhwv61knI-aOGZ7pQ
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
IMG_SIZE = 224
BATCH_SIZE = 32

from google.colab import drive
drive.mount('/content/drive')

train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2)
train_generator = train_datagen.flow_from_directory("/content/drive/MyDrive/train test",
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training')
val_generator = train_datagen.flow_from_directory(
    "/content/drive/MyDrive/train test",
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation'
)
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    "/content/drive/MyDrive/Brain_Tumor_Detection/test",
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

model = keras.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(train_generator,validation_data=val_generator,epochs=2)

model.save("Model1.h5","label.txt")

#test your image
from keras.models import load_model  # TensorFlow is required for Keras to work
from PIL import Image,ImageOps
from tensorflow.keras.preprocessing import image
import numpy as np

#load the model
model = load_model('/content/Model1.h5')
#load and preproces the test image
test_image_path ='/content/drive/MyDrive/train test/PNEUMONIA/person1015_virus_1702.jpeg'
img=image.load_img(test_image_path,target_size=(224,224))
img_array=image.img_to_array(img)
img_array=np.expand_dims(img_array,axis=0)
img_array/=255

#Make predicitons
prediction = model.predict(img_array)

#print the prediciton
if prediction<0.5:
  print("Prediction : No pnuemonia(probability : ",prediction[0][0],")")
else:
  print("Prediction : pnuemonia : (probability",prediction[0][0],")")

!pip install Pillow

from PIL import Image
from IPython.display import display
# Open the image file
image_path = '/content/drive/MyDrive/train test/PNEUMONIA/person1002_bacteria_2933.jpeg'  # Replace 'your_image.jpg' with the path to your image file
image = Image.open(image_path)
# Display the image
display(image)

!pip install librosa

import librosa
# Load audio file
audio_path = '/content/drive/MyDrive/audio/pnuemonia present.mp3'  # Replace 'your_audio.wav' with the path to your audio file
audio_data, sr = librosa.load(audio_path)
# Extract features (e.g., MFCCs)
mfccs = librosa.feature.mfcc(y=audio_data, sr=sr)

from google.colab import files
# Upload an audio file
uploaded = files.upload()

from IPython.display import Audio

# Path to your audio file
audio_path = '/content/1708511937638upmkyz6-voicemaker.in-speech.mp3'

# Display the audio
Audio(audio_path)

print("Audio Data Shape:", audio_data.shape)

from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
# Create a PDF document
pdf_path = "medical_report.pdf"
c = canvas.Canvas(pdf_path, pagesize=letter)
# Write prediction results to the PDF
if prediction < 0.5:
    prediction_text = "Prediction: No pneumonia (probability: {})".format(prediction[0][0])
else:
    prediction_text = "Prediction: Pneumonia (probability: {},consult the doctor)".format(prediction[0][0])
c.drawString(100, 700, prediction_text)
# Save the PDF document
c.save()
print("Medical report saved as:", pdf_path)